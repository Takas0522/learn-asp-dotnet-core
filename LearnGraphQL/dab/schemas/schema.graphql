schema {
  query: Query
  mutation: Mutation
}

enum OrderBy {
  ASC
  DESC
}

input DefaultValue {
  Byte: Byte
  Short: Short
  Int: Int
  Long: Long
  String: String
  Boolean: Boolean
  Single: Single
  Float: Float
  Decimal: Decimal
  DateTime: DateTime
  ByteArray: ByteArray
}

type Item {
  Id: Int!
  Name: String!
  CategoryType: Int!
  Price: Decimal!
}

"Order by input for Item GraphQL type"
input ItemOrderByInput {
  "Order by options for Id"
  Id: OrderBy
  "Order by options for Name"
  Name: OrderBy
  "Order by options for CategoryType"
  CategoryType: OrderBy
  "Order by options for Price"
  Price: OrderBy
  "Conditions to be treated as AND operations"
  and: [ItemOrderByInput]
  "Conditions to be treated as OR operations"
  or: [ItemOrderByInput]
}

"Input type for adding Int filters"
input IntFilterInput {
  "Equals"
  eq: Int
  "Greater Than"
  gt: Int
  "Greater Than or Equal To"
  gte: Int
  "Less Than"
  lt: Int
  "Less Than or Equal To"
  lte: Int
  "Not Equals"
  neq: Int
  "Not null test"
  isNull: Boolean
}

"Input type for adding String filters"
input StringFilterInput {
  "Equals"
  eq: String
  "Contains"
  contains: String
  "Not Contains"
  notContains: String
  "Starts With"
  startsWith: String
  "Ends With"
  endsWith: String
  "Not Equals"
  neq: String
  "Case Insensitive"
  caseInsensitive: Boolean = false
  "Not null test"
  isNull: Boolean
}

"Input type for adding Decimal filters"
input DecimalFilterInput {
  "Equals"
  eq: Decimal
  "Greater Than"
  gt: Decimal
  "Greater Than or Equal To"
  gte: Decimal
  "Less Than"
  lt: Decimal
  "Less Than or Equal To"
  lte: Decimal
  "Not Equals"
  neq: Decimal
  "Not null test"
  isNull: Boolean
}

"Filter input for Item GraphQL type"
input ItemFilterInput {
  "Filter options for Id"
  Id: IntFilterInput
  "Filter options for Name"
  Name: StringFilterInput
  "Filter options for CategoryType"
  CategoryType: IntFilterInput
  "Filter options for Price"
  Price: DecimalFilterInput
  "Conditions to be treated as AND operations"
  and: [ItemFilterInput]
  "Conditions to be treated as OR operations"
  or: [ItemFilterInput]
}

type Query {
  "Get a list of all the Item items from the database"
  items("The number of items to return from the page start point" first: Int "A pagination token from a previous query to continue through a paginated list" after: String "Filter options for query" filter: ItemFilterInput "Ordering options for query" orderBy: ItemOrderByInput): ItemConnection!
  "Get a Item from the database by its ID\/primary key"
  item_by_pk(Id: Int!): Item
}

"The return object from a filter query that supports a pagination token for paging through results"
type ItemConnection {
  "The list of items that matched the filter"
  items: [Item!]!
  "A pagination token to provide to subsequent pages of a query"
  endCursor: String
  "Indicates if there are more pages of items to return"
  hasNextPage: Boolean!
}

type Mutation {
  "Creates a new Item"
  createItem("Input representing all the fields for creating Item" item: CreateItemInput!): Item
  "Updates a Item"
  updateItem("The ID of the item being updated." Id: Int! "Input representing all the fields for updating Item" item: UpdateItemInput!): Item
  "Delete a Item"
  deleteItem("The ID of the item being deleted." Id: Int!): Item
}

"Input type for creating Item"
input CreateItemInput {
  "Input for field Id on type CreateItemInput"
  Id: Int!
  "Input for field Name on type CreateItemInput"
  Name: String!
  "Input for field CategoryType on type CreateItemInput"
  CategoryType: Int!
  "Input for field Price on type CreateItemInput"
  Price: Decimal!
}

"Input type for updating Item"
input UpdateItemInput {
  "Input for field Id on type UpdateItemInput"
  Id: Int
  "Input for field Name on type UpdateItemInput"
  Name: String
  "Input for field CategoryType on type UpdateItemInput"
  CategoryType: Int
  "Input for field Price on type UpdateItemInput"
  Price: Decimal
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

"The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255."
scalar Byte

"The `Short` scalar type represents non-fractional signed whole 16-bit numeric values. Short can represent values between -(2^15) and 2^15 - 1."
scalar Short

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"IEEE 754 32 bit float"
scalar Single

"The built-in `Decimal` scalar type."
scalar Decimal

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

scalar ByteArray

"The `@oneOf` directive is used within the type system definition language\n to indicate:\n\n - an Input Object is a Oneof Input Object, or\n - an Object Type's Field is a Oneof Field."
directive @oneOf on INPUT_OBJECT

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on SCHEMA | OBJECT | FIELD_DEFINITION

"A directive to indicate the type maps to a storable entity not a nested entity."
directive @model("Underlying name of the database entity." name: String) on OBJECT

"A directive to indicate the relationship between two tables"
directive @relationship("The name of the GraphQL type the relationship targets" target: String "The relationship cardinality" cardinality: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"A directive to indicate the primary key field of an item."
directive @primaryKey("The underlying database type." databaseType: String) on FIELD_DEFINITION

"The default value to be used when creating an item."
directive @defaultValue(value: DefaultValue) on FIELD_DEFINITION

"Indicates that a field is auto generated by the database."
directive @autoGenerated on FIELD_DEFINITION